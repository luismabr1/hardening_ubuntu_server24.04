# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# ADDUSER='/etc/adduser.conf'
# USERADD='/etc/default/useradd'
# APT='apt-get'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_adduser {
    echo "[$SCRIPT_COUNT] Hardening user account creation and home directories"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure required packages are installed (adduser, passwd for useradd)
    local required_pkgs=("adduser" "passwd")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg is not installed, required for user management"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done
    rm -f /tmp/apt_install_error

    # Backup configuration files
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    local config_files=("$ADDUSER" "$USERADD")
    for file in "${config_files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        else
            log_message "WARNING: $file not found, creating it"
            touch "$file" || {
                log_message "ERROR: Failed to create $file"
                return 1
            }
        fi
        if [[ ! -w "$file" ]]; then
            log_message "ERROR: $file is not writable"
            return 1
        fi
    done

    # Modify adduser.conf (CIS 6.2.2)
    local settings=(
        "s|^DIR_MODE=.*|DIR_MODE=0750|"  # Secure home dir perms
        "s|^#DIR_MODE=.*|DIR_MODE=0750|"
        "s|^DSHELL=.*|DSHELL=/bin/false|"  # Non-login shell
        "s|^#DSHELL=.*|DSHELL=/bin/false|"
        "s|^USERGROUPS=.*|USERGROUPS=yes|"  # Private groups
        "s|^#USERGROUPS=.*|USERGROUPS=yes|"
    )
    for setting in "${settings[@]}"; do
        if sed -i "$setting" "$ADDUSER" 2>/tmp/sed_error; then
            log_message "INFO: Successfully applied $setting to $ADDUSER"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to apply $setting to $ADDUSER - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1  # Critical failure, exit
        fi
    done

    # Modify useradd defaults (NIST AC-2)
    if sed -i "s|^SHELL=.*|SHELL=/bin/false|" "$USERADD" 2>/tmp/sed_error; then
        log_message "INFO: Set default shell to /bin/false in $USERADD"
    else
        local error_msg=$(cat /tmp/sed_error)
        log_message "ERROR: Failed to set default shell in $USERADD - Error: $error_msg"
        rm -f /tmp/sed_error
        return 1
    fi
    if sed -i "s|^# INACTIVE=.*|INACTIVE=30|" "$USERADD" 2>/tmp/sed_error; then
        log_message "INFO: Set account inactivity to 30 days in $USERADD"
    else
        local error_msg=$(cat /tmp/sed_error)
        log_message "ERROR: Failed to set inactivity period in $USERADD - Error: $error_msg"
        rm -f /tmp/sed_error
        return 1
    fi

    # Harden existing user home directories (CIS 6.2.8)
    local changed=0
    while IFS=':' read -r username _ _ uid _ home _; do
        # Skip system accounts and invalid entries
        if [[ "$uid" -lt 1000 || "$uid" -gt 65000 || -z "$home" ]]; then
            continue
        fi
        if [[ -d "$home" ]]; then
            if chmod 0750 "$home" 2>/tmp/chmod_error; then
                log_message "INFO: Hardened permissions to 0750 on $home for user $username"
                ((changed++))
            else
                local error_msg=$(cat /tmp/chmod_error)
                log_message "WARNING: Failed to harden $home for user $username - Error: $error_msg"
            fi
            if chown "$username:" "$home" 2>/tmp/chown_error; then
                log_message "INFO: Set ownership to $username on $home"
            else
                local error_msg=$(cat /tmp/chown_error)
                log_message "WARNING: Failed to set ownership on $home for user $username - Error: $error_msg"
            fi
        else
            log_message "INFO: Skipping $home for user $username - not a directory"
        fi
    done < /etc/passwd
    log_message "INFO: Modified permissions for $changed user directories"

    # Verify key settings
    if grep -q "DIR_MODE=0750" "$ADDUSER" && grep -q "DSHELL=/bin/false" "$ADDUSER" && grep -q "USERGROUPS=yes" "$ADDUSER" && \
       grep -q "SHELL=/bin/false" "$USERADD" && grep -q "INACTIVE=30" "$USERADD"; then
        log_message "INFO: Verified user hardening settings applied successfully"
    else
        log_message "WARNING: Some user hardening settings not applied as expected"
    fi
    rm -f /tmp/chmod_error /tmp/chown_error /tmp/sed_error /tmp/cp_error /tmp/apt_install_error

    echo "Hardening complete. Check $LOG_FILE for details"
    ((SCRIPT_COUNT++))
}

# Main execution
if [[ "$VERBOSE" == "Y" ]]; then
    echo "Starting user hardening process..."
fi

f_adduser

if [[ "$VERBOSE" == "Y" ]]; then
    echo "Completed. Steps executed: $SCRIPT_COUNT"
fi