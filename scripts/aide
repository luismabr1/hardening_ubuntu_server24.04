# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LXC='0'

# New variables to add to global variables file (if not already present):
# AIDE_CONF='/etc/aide/aide.conf'  # Path to AIDE configuration file

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_aide {
    echo "[$SCRIPT_COUNT] Configuring AIDE for intrusion detection"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure aide is installed
    if ! dpkg -l | grep -q "^ii.*aide"; then
        log_message "WARNING: aide package not found, required for AIDE configuration"
        log_message "INFO: Attempting to install aide"
        if $APT install -y aide 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed aide"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install aide - Error: $error_msg"
            echo "Failed to install aide. Check $LOG_FILE for details."
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: aide package is already installed"
    fi

    # Verify aideinit is available
    if ! command -v aideinit >/dev/null 2>&1; then
        log_message "ERROR: aideinit not found, ensure aide is installed correctly"
        echo "aideinit not found, ensure aide is installed. Exiting."
        return 1
    fi

    # Backup AIDE configuration
    local aide_conf="/etc/aide/aide.conf"  # Using AIDE_CONF if defined
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        echo "Failed to create backup directory $BACKUP_DIR. Exiting."
        return 1
    }
    if [[ -f "$aide_conf" ]]; then
        if cp "$aide_conf" "$BACKUP_DIR/aide.conf.$TIMESTAMP" 2>/tmp/cp_error; then
            log_message "INFO: Backed up $aide_conf to $BACKUP_DIR/aide.conf.$TIMESTAMP"
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to backup $aide_conf - Error: $error_msg"
            echo "Failed to backup $aide_conf. Check $LOG_FILE for details."
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "WARNING: $aide_conf not found, creating default configuration"
        if touch "$aide_conf" 2>/tmp/touch_error; then
            log_message "INFO: Created $aide_conf"
        else
            local error_msg=$(cat /tmp/touch_error)
            log_message "ERROR: Failed to create $aide_conf - Error: $error_msg"
            echo "Failed to create $aide_conf. Exiting."
            rm -f /tmp/touch_error
            return 1
        fi
    fi

    # Ensure aide.conf is writable
    if [[ ! -w "$aide_conf" ]]; then
        log_message "ERROR: $aide_conf is not writable"
        echo "$aide_conf is not writable. Exiting."
        return 1
    fi

    # Basic AIDE configuration (example, adjust as needed)
    local aide_settings=(
        "database=file:/var/lib/aide/aide.db"       # Default database location
        "database_out=file:/var/lib/aide/aide.db.new"  # Output for updates
        "/etc p+i+u+g+sha256"                      # Monitor /etc with permissions and hash
        "/bin p+i+u+g+sha256"                      # Monitor /bin
        "/sbin p+i+u+g+sha256"                     # Monitor /sbin
        "!/etc/aide/aide.conf"                     # Exclude aide.conf itself
    )
    for setting in "${aide_settings[@]}"; do
        if ! grep -qF "$setting" "$aide_conf" 2>/dev/null; then
            if echo "$setting" >> "$aide_conf" 2>/tmp/echo_error; then
                log_message "INFO: Added '$setting' to $aide_conf"
            else
                local error_msg=$(cat /tmp/echo_error)
                log_message "ERROR: Failed to add '$setting' to $aide_conf - Error: $error_msg"
                echo "Failed to configure $aide_conf. Check $LOG_FILE for details."
                rm -f /tmp/echo_error
                return 1
            fi
        else
            log_message "INFO: '$setting' already present in $aide_conf"
        fi
    done

    # Set permissions on aide.conf
    if chmod 0640 "$aide_conf" 2>/tmp/chmod_error; then
        log_message "INFO: Set permissions to 0640 on $aide_conf"
    else
        local error_msg=$(cat /tmp/chmod_error)
        log_message "ERROR: Failed to set permissions on $aide_conf - Error: $error_msg"
        echo "Failed to set permissions on $aide_conf. Exiting."
        rm -f /tmp/chmod_error
        return 1
    fi
    if chown root:root "$aide_conf" 2>/tmp/chown_error; then
        log_message "INFO: Set ownership to root:root on $aide_conf"
    else
        local error_msg=$(cat /tmp/chown_error)
        log_message "ERROR: Failed to set ownership on $aide_conf - Error: $error_msg"
        echo "Failed to set ownership on $aide_conf. Exiting."
        rm -f /tmp/chown_error
        return 1
    fi

    # Initialize AIDE database
    if aideinit 2>/tmp/aideinit_error; then
        log_message "INFO: Successfully initialized AIDE database with aideinit"
    else
        local error_msg=$(cat /tmp/aideinit_error)
        log_message "ERROR: Failed to initialize AIDE database - Error: $error_msg"
        echo "Failed to initialize AIDE database. Check $LOG_FILE for details."
        rm -f /tmp/aideinit_error
        return 1
    fi

    # Verify AIDE configuration
    local verified=true
    if [[ -f "$aide_conf" ]] && grep -q "database=file:/var/lib/aide/aide.db" "$aide_conf" 2>/dev/null; then
        log_message "INFO: Verified $aide_conf contains database setting"
    else
        log_message "WARNING: $aide_conf missing or lacks database setting"
        verified=false
    fi
    if [[ -f /var/lib/aide/aide.db ]]; then
        log_message "INFO: Verified AIDE database exists at /var/lib/aide/aide.db"
    else
        log_message "WARNING: AIDE database not found at /var/lib/aide/aide.db"
        verified=false
    fi
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified AIDE configuration and database initialization"
    fi

    rm -f /tmp/echo_error /tmp/chmod_error /tmp/chown_error /tmp/aideinit_error /tmp/cp_error /tmp/touch_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming sourced in main script)
# f_aide