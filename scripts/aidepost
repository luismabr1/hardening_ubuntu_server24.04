#!/bin/bash

# Standalone script for f_aide_post

# Global variables
#LOG_FILE="/var/log/user_hardening.log"
#BACKUP_DIR="/root/backups"
#TIMESTAMP=$(date +%Y%m%d_%H%M%S)
#VERBOSE='N'  # Default to no verbose output; override in main script if needed
#SCRIPT_COUNT=0
#APT='apt-get'
#AIDE_CONF='/etc/aide/aide.conf'
#AIDE_DB='/var/lib/aide/aide.db'
#AIDE_DB_NEW='/var/lib/aide/aide.db.new'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_aide_post {
    echo "[$SCRIPT_COUNT] Securing AIDE database post-initialization"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure aide is installed
    local required_pkgs=("aide")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg not found, required for AIDE configuration"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done

    # Backup AIDE database files
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    local aide_files=("$AIDE_DB" "$AIDE_DB_NEW")
    for file in "${aide_files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Secure AIDE database permissions (CIS 1.3.1)
    local db_files=("$AIDE_DB" "$AIDE_DB_NEW")
    for db in "${db_files[@]}"; do
        if [[ -f "$db" ]]; then
            if chmod 0640 "$db" 2>/tmp/chmod_error; then
                log_message "INFO: Set permissions to 0640 on $db"
            else
                local error_msg=$(cat /tmp/chmod_error)
                log_message "ERROR: Failed to set permissions on $db - Error: $error_msg"
                rm -f /tmp/chmod_error
                return 1
            fi
            if chown root:root "$db" 2>/tmp/chown_error; then
                log_message "INFO: Set ownership to root:root on $db"
            else
                local error_msg=$(cat /tmp/chown_error)
                log_message "ERROR: Failed to set ownership on $db - Error: $error_msg"
                rm -f /tmp/chown_error
                return 1
            fi
        else
            log_message "WARNING: $db not found, skipping permission changes"
        fi
    done

    # Verify AIDE database security
    local verified=true
    for db in "${db_files[@]}"; do
        if [[ -f "$db" ]]; then
            local perms=$(stat -c "%a" "$db" 2>/tmp/stat_error)
            local owner=$(stat -c "%U:%G" "$db" 2>/tmp/stat_error)
            if [[ "$perms" != "640" || "$owner" != "root:root" ]]; then
                log_message "WARNING: $db does not have correct permissions (0640) or ownership (root:root)"
                verified=false
            fi
        fi
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified AIDE database files are secured"
    fi

    # Show status if verbose
    if [[ "$VERBOSE" == "Y" ]]; then
        ls -l "$AIDE_DB" "$AIDE_DB_NEW" 2>/dev/null
        echo
    fi

    rm -f /tmp/chmod_error /tmp/chown_error /tmp/cp_error /tmp/stat_error /tmp/apt_install_error
    ((SCRIPT_COUNT++))
}

# Execute the function
echo "[HARDENING LOG - $(hostname --fqdn) - $(LANG=C date)]" > "$LOG_FILE"
trap 'log_message "ERROR: Script terminated unexpectedly with exit code $?"; exit 1' ERR
f_aide_post