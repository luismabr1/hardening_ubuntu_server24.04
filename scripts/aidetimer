#!/bin/bash

# Standalone script for f_aide_timer

# Global variables
#LOG_FILE="/var/log/user_hardening.log"
#BACKUP_DIR="/root/backups"
#TIMESTAMP=$(date +%Y%m%d_%H%M%S)
#VERBOSE='N'  # Default to no verbose output; override in main script if needed
#SCRIPT_COUNT=0
#APT='apt-get'
#AIDE_CONF='/etc/aide/aide.conf'
#AIDE_SERVICE='/etc/systemd/system/aidecheck.service'
#AIDE_TIMER='/etc/systemd/system/aidecheck.timer'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_aide_timer {
    echo "[$SCRIPT_COUNT] Configuring AIDE timer for periodic checks"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure aide and systemd are installed
    local required_pkgs=("aide" "systemd")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg not found, required for AIDE timer configuration"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done

    # Backup existing service and timer files
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    local aide_files=("$AIDE_SERVICE" "$AIDE_TIMER")
    for file in "${aide_files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Create AIDE check service
    local service_content=$(cat <<EOF
[Unit]
Description=AIDE Filesystem Integrity Check
Documentation=man:aide(1)

[Service]
Type=oneshot
ExecStart=/usr/bin/aide --check
Nice=19
IOSchedulingClass=2
IOSchedulingPriority=7
EOF
    )
    if echo "$service_content" > "$AIDE_SERVICE" 2>/tmp/echo_error; then
        log_message "INFO: Created AIDE check service at $AIDE_SERVICE"
        if chmod 0644 "$AIDE_SERVICE" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0644 on $AIDE_SERVICE"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $AIDE_SERVICE - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$AIDE_SERVICE" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $AIDE_SERVICE"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $AIDE_SERVICE - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/echo_error)
        log_message "ERROR: Failed to create $AIDE_SERVICE - Error: $error_msg"
        rm -f /tmp/echo_error
        return 1
    fi

    # Create AIDE check timer (daily at 4 AM, CIS 1.3.2)
    local timer_content=$(cat <<EOF
[Unit]
Description=Daily AIDE Filesystem Integrity Check Timer

[Timer]
OnCalendar=*-*-* 04:00:00
Persistent=true

[Install]
WantedBy=timers.target
EOF
    )
    if echo "$timer_content" > "$AIDE_TIMER" 2>/tmp/echo_error; then
        log_message "INFO: Created AIDE check timer at $AIDE_TIMER"
        if chmod 0644 "$AIDE_TIMER" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0644 on $AIDE_TIMER"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $AIDE_TIMER - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$AIDE_TIMER" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $AIDE_TIMER"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $AIDE_TIMER - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/echo_error)
        log_message "ERROR: Failed to create $AIDE_TIMER - Error: $error_msg"
        rm -f /tmp/echo_error
        return 1
    fi

    # Enable and start the timer
    if systemctl enable "$AIDE_TIMER" 2>/tmp/systemctl_error; then
        log_message "INFO: Enabled AIDE timer"
        if systemctl start "$AIDE_TIMER" 2>/tmp/systemctl_error; then
            log_message "INFO: Started AIDE timer"
        else
            local error_msg=$(cat /tmp/systemctl_error)
            log_message "ERROR: Failed to start AIDE timer - Error: $error_msg"
            rm -f /tmp/systemctl_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/systemctl_error)
        log_message "ERROR: Failed to enable AIDE timer - Error: $error_msg"
        rm -f /tmp/systemctl_error
        return 1
    fi

    # Verify timer setup
    local verified=true
    if systemctl is-enabled "$(basename "$AIDE_TIMER")" >/dev/null 2>&1; then
        log_message "INFO: Verified AIDE timer is enabled"
    else
        log_message "WARNING: AIDE timer is not enabled"
        verified=false
    fi
    if systemctl is-active "$(basename "$AIDE_TIMER")" >/dev/null 2>&1; then
        log_message "INFO: Verified AIDE timer is active"
    else
        log_message "WARNING: AIDE timer is not active"
        verified=false
    fi
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified AIDE timer setup"
    fi

    # Show status if verbose
    if [[ "$VERBOSE" == "Y" ]]; then
        systemctl status "$(basename "$AIDE_TIMER")" --no-pager
        echo
    fi

    rm -f /tmp/echo_error /tmp/chmod_error /tmp/chown_error /tmp/systemctl_error /tmp/cp_error /tmp/apt_install_error
    ((SCRIPT_COUNT++))
}

# Execute the function
echo "[HARDENING LOG - $(hostname --fqdn) - $(LANG=C date)]" > "$LOG_FILE"
trap 'log_message "ERROR: Script terminated unexpectedly with exit code $?"; exit 1' ERR
f_aide_timer