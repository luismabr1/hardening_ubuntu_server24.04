#!/bin/bash

# Standalone script for f_aide_timer

# Function to log messages with fallback
log_message() {
    local message="$(date '+%Y-%m-%d %H:%M:%S') - $1"
    echo "$message" | tee -a "$LOG_FILE" 2>/dev/null || echo "$message" >&2
}

function f_aide_timer {
    log_message "DEBUG: Starting f_aide_timer"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Check log file writability
    if ! touch "$LOG_FILE" 2>/dev/null; then
        log_message "ERROR: Log file $LOG_FILE is not writable"
        return 1
    fi

    # Ensure aide and systemd are installed
    log_message "DEBUG: Checking required packages"
    local required_pkgs=("aide" "systemd")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg not found, required for AIDE timer configuration"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done

    # Backup existing service and timer files
    log_message "DEBUG: Backing up AIDE files"
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    local aide_files=("$AIDE_SERVICE" "$AIDE_TIMER")
    for file in "${aide_files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Clean up residual typo files
    log_message "DEBUG: Cleaning up residual typo files"
    local systemd_dir="/etc/systemd/system"
    if ls "$systemd_dir"/aidecheck.tiemr* >/dev/null 2>&1; then
        rm -f "$systemd_dir"/aidecheck.tiemr* && \
            log_message "INFO: Removed residual typo files (aidecheck.tiemr*) from $systemd_dir" || \
            log_message "WARNING: Failed to remove residual typo files (aidecheck.tiemr*)"
    fi

    # Create AIDE check service
    log_message "DEBUG: Creating AIDE service"
    local service_content=$(cat <<EOF
[Unit]
Description=AIDE Filesystem Integrity Check
Documentation=man:aide(1)

[Service]
Type=oneshot
ExecStart=/usr/bin/aide --check
Nice=19
IOSchedulingClass=2
IOSchedulingPriority=7
EOF
    )
    if echo "$service_content" > "$AIDE_SERVICE" 2>/tmp/echo_error; then
        log_message "INFO: Created AIDE check service at $AIDE_SERVICE"
        if chmod 0644 "$AIDE_SERVICE" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0644 on $AIDE_SERVICE"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $AIDE_SERVICE - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$AIDE_SERVICE" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $AIDE_SERVICE"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $AIDE_SERVICE - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/echo_error)
        log_message "ERROR: Failed to create $AIDE_SERVICE - Error: $error_msg"
        rm -f /tmp/echo_error
        return 1
    fi

    # Create AIDE check timer
    log_message "DEBUG: Creating AIDE timer"
    local timer_content=$(cat <<EOF
[Unit]
Description=Daily AIDE Filesystem Integrity Check Timer

[Timer]
OnCalendar=*-*-* 04:00:00
Persistent=true

[Install]
WantedBy=timers.target
EOF
    )
    if echo "$timer_content" > "$AIDE_TIMER" 2>/tmp/echo_error; then
        log_message "INFO: Created AIDE check timer at $AIDE_TIMER"
        if chmod 0644 "$AIDE_TIMER" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0644 on $AIDE_TIMER"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $AIDE_TIMER - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$AIDE_TIMER" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $AIDE_TIMER"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $AIDE_TIMER - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/echo_error)
        log_message "ERROR: Failed to create $AIDE_TIMER - Error: $error_msg"
        rm -f /tmp/echo_error
        return 1
    fi

    # Reload systemd daemon
    log_message "DEBUG: Reloading systemd daemon"
    if systemctl daemon-reload 2>/tmp/systemctl_reload
}