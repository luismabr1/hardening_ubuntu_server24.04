# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# SYSTEMCONF='/etc/systemd/system.conf'
# APT='apt-get'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_ctrlaltdel {
    echo "[$SCRIPT_COUNT] Disabling Ctrl+Alt+Delete functionality"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure systemd is installed (core to Ubuntu Server, but checked for robustness)
    if ! dpkg -l | grep -q "^ii.*systemd"; then
        log_message "WARNING: systemd package not found, required for Ctrl+Alt+Delete configuration"
        log_message "INFO: Attempting to install systemd"
        if $APT install -y systemd 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed systemd"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install systemd - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: systemd package is already installed"
    fi
    rm -f /tmp/apt_install_error

    # Mask ctrl-alt-del.target (CIS 1.1.8)
    if systemctl mask ctrl-alt-del.target 2>/tmp/mask_error; then
        log_message "INFO: Successfully masked ctrl-alt-del.target"
    else
        local error_msg=$(cat /tmp/mask_error)
        log_message "ERROR: Failed to mask ctrl-alt-del.target - Error: $error_msg"
        rm -f /tmp/mask_error
        return 1
    fi

    # Backup system.conf before modification
    if [[ -f "$SYSTEMCONF" ]]; then
        mkdir -p "$BACKUP_DIR" || {
            log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
            return 1
        }
        if cp "$SYSTEMCONF" "$BACKUP_DIR/system.conf.$TIMESTAMP" 2>/tmp/cp_error; then
            log_message "INFO: Backed up $SYSTEMCONF to $BACKUP_DIR/system.conf.$TIMESTAMP"
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to backup $SYSTEMCONF - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi

        # Ensure file is writable
        if [[ ! -w "$SYSTEMCONF" ]]; then
            log_message "ERROR: $SYSTEMCONF is not writable"
            return 1
        fi

        # Configure CtrlAltDelBurstAction (NIST AC-6)
        if sed -i 's|^#CtrlAltDelBurstAction=.*|CtrlAltDelBurstAction=none|' "$SYSTEMCONF" 2>/tmp/sed_error; then
            log_message "INFO: Set CtrlAltDelBurstAction to none in $SYSTEMCONF"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to set CtrlAltDelBurstAction in $SYSTEMCONF - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi

        # Reload systemd daemon to apply changes
        if systemctl daemon-reload 2>/tmp/daemon_error; then
            log_message "INFO: Successfully reloaded systemd daemon"
        else
            local error_msg=$(cat /tmp/daemon_error)
            log_message "ERROR: Failed to reload systemd daemon - Error: $error_msg"
            rm -f /tmp/daemon_error
            return 1
        fi
    else
        log_message "WARNING: $SYSTEMCONF not found, CtrlAltDelBurstAction not configured"
    fi
    rm -f /tmp/cp_error /tmp/sed_error /tmp/daemon_error /tmp/mask_error

    # Verify configuration
    if systemctl is-enabled ctrl-alt-del.target 2>/dev/null | grep -q "masked"; then
        log_message "INFO: Verified ctrl-alt-del.target is masked"
    else
        log_message "WARNING: ctrl-alt-del.target is not masked as expected"
    fi

    # Show status if verbose
    if [[ "$VERBOSE" == "Y" ]]; then
        systemctl status ctrl-alt-del.target --no-pager
        echo
    fi

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_ctrlaltdel
