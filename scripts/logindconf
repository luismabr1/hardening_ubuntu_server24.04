# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LOGINDCONF='/etc/systemd/logind.conf'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_logindconf {
    echo "[$SCRIPT_COUNT] Configuring systemd/logind.conf for session and resource security"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure systemd is installed (core to logind)
    if ! dpkg -l | grep -q "^ii.*systemd"; then
        log_message "WARNING: systemd package not found, required for logind configuration"
        log_message "INFO: Attempting to install systemd"
        if $APT install -y systemd 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed systemd"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install systemd - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: systemd package is already installed"
    fi
    rm -f /tmp/apt_install_error

    # Backup logind.conf
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    if [[ -f "$LOGINDCONF" ]]; then
        if cp "$LOGINDCONF" "$BACKUP_DIR/logind.conf.$TIMESTAMP" 2>/tmp/cp_error; then
            log_message "INFO: Backed up $LOGINDCONF to $BACKUP_DIR/logind.conf.$TIMESTAMP"
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to backup $LOGINDCONF - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "WARNING: $LOGINDCONF not found, creating it"
        touch "$LOGINDCONF" || {
            log_message "ERROR: Failed to create $LOGINDCONF"
            return 1
        }
    fi

    # Ensure file is writable
    if [[ ! -w "$LOGINDCONF" ]]; then
        log_message "ERROR: $LOGINDCONF is not writable"
        return 1
    fi

    # Configure logind.conf (CIS 5.5, NIST CM-7)
    local logind_settings=(
        "s|^#KillUserProcesses=.*|KillUserProcesses=yes|"  # Kill user processes on logout
        "s|^#KillExcludeUsers=.*|KillExcludeUsers=root|"   # Exclude root
        "s|^#IdleAction=.*|IdleAction=lock|"               # Lock idle sessions
        "s|^#IdleActionSec=.*|IdleActionSec=15min|"        # Lock after 15 minutes
        "s|^#RemoveIPC=.*|RemoveIPC=yes|"                  # Remove IPC resources
    )
    for setting in "${logind_settings[@]}"; do
        if sed -i "$setting" "$LOGINDCONF" 2>/tmp/sed_error; then
            log_message "INFO: Applied $setting to $LOGINDCONF"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to apply $setting to $LOGINDCONF - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    done

    # Set secure permissions
    if chmod 0644 "$LOGINDCONF" 2>/tmp/chmod_error; then
        log_message "INFO: Set permissions to 0644 on $LOGINDCONF"
    else
        local error_msg=$(cat /tmp/chmod_error)
        log_message "ERROR: Failed to set permissions on $LOGINDCONF - Error: $error_msg"
        rm -f /tmp/chmod_error
        return 1
    fi
    if chown root:root "$LOGINDCONF" 2>/tmp/chown_error; then
        log_message "INFO: Set ownership to root:root on $LOGINDCONF"
    else
        local error_msg=$(cat /tmp/chown_error)
        log_message "ERROR: Failed to set ownership on $LOGINDCONF - Error: $error_msg"
        rm -f /tmp/chown_error
        return 1
    fi

    # Reload systemd daemon
    if systemctl daemon-reload 2>/tmp/daemon_error; then
        log_message "INFO: Successfully reloaded systemd daemon to apply logind changes"
    else
        local error_msg=$(cat /tmp/daemon_error)
        log_message "ERROR: Failed to reload systemd daemon - Error: $error_msg"
        rm -f /tmp/daemon_error
        return 1
    fi

    # Verify configuration
    local verified=true
    for opt in "KillUserProcesses=yes" "KillExcludeUsers=root" "IdleAction=lock" "IdleActionSec=15min" "RemoveIPC=yes"; do
        if ! grep -q "^$opt" "$LOGINDCONF" 2>/dev/null; then
            log_message "WARNING: $opt not set in $LOGINDCONF as expected"
            verified=false
        fi
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified all logind configuration settings applied"
    fi
    rm -f /tmp/sed_error /tmp/chmod_error /tmp/chown_error /tmp/cp_error /tmp/daemon_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_logindconf
