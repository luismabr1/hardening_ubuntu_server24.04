# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LOGINDEFS='/etc/login.defs'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_logindefs {
    echo "[$SCRIPT_COUNT] Configuring /etc/login.defs for secure login and password policies"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure passwd package is installed (for login.defs support)
    if ! dpkg -l | grep -q "^ii.*passwd"; then
        log_message "WARNING: passwd package not found, required for login.defs configuration"
        log_message "INFO: Attempting to install passwd"
        if $APT install -y passwd 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed passwd"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install passwd - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: passwd package is already installed"
    fi
    rm -f /tmp/apt_install_error

    # Backup login.defs
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    if [[ -f "$LOGINDEFS" ]]; then
        if cp "$LOGINDEFS" "$BACKUP_DIR/login.defs.$TIMESTAMP" 2>/tmp/cp_error; then
            log_message "INFO: Backed up $LOGINDEFS to $BACKUP_DIR/login.defs.$TIMESTAMP"
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to backup $LOGINDEFS - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "WARNING: $LOGINDEFS not found, creating it"
        touch "$LOGINDEFS" || {
            log_message "ERROR: Failed to create $LOGINDEFS"
            return 1
        }
    fi

    # Ensure file is writable
    if [[ ! -w "$LOGINDEFS" ]]; then
        log_message "ERROR: $LOGINDEFS is not writable"
        return 1
    fi

    # Configure login.defs (CIS 6.2.3, NIST IA-5)
    local login_settings=(
        "s|^[#]*LOG_OK_LOGINS.*|LOG_OK_LOGINS yes|"              # Log successful logins
        "s|^[#]*UMASK.*|UMASK 077|"                              # Restrictive umask
        "s|^[#]*PASS_MIN_DAYS.*|PASS_MIN_DAYS 1|"               # Min password age
        "s|^[#]*PASS_MAX_DAYS.*|PASS_MAX_DAYS 60|"              # Max password age
        "s|^[#]*DEFAULT_HOME.*|DEFAULT_HOME no|"                # No login without home dir
        "s|^[#]*ENCRYPT_METHOD.*|ENCRYPT_METHOD SHA512|"        # SHA512 encryption
        "s|^[#]*USERGROUPS_ENAB.*|USERGROUPS_ENAB no|"          # No auto user groups
        "s|^[#]*SHA_CRYPT_MIN_ROUNDS.*|SHA_CRYPT_MIN_ROUNDS 10000|"  # Min rounds
        "s|^[#]*SHA_CRYPT_MAX_ROUNDS.*|SHA_CRYPT_MAX_ROUNDS 65536|"  # Max rounds
    )
    for setting in "${login_settings[@]}"; do
        if sed -i "$setting" "$LOGINDEFS" 2>/tmp/sed_error; then
            log_message "INFO: Applied $setting to $LOGINDEFS"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to apply $setting to $LOGINDEFS - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    done

    # Set secure permissions (CIS 6.2.3 recommends 0644)
    if chmod 0644 "$LOGINDEFS" 2>/tmp/chmod_error; then
        log_message "INFO: Set permissions to 0644 on $LOGINDEFS"
    else
        local error_msg=$(cat /tmp/chmod_error)
        log_message "ERROR: Failed to set permissions on $LOGINDEFS - Error: $error_msg"
        rm -f /tmp/chmod_error
        return 1
    fi
    if chown root:root "$LOGINDEFS" 2>/tmp/chown_error; then
        log_message "INFO: Set ownership to root:root on $LOGINDEFS"
    else
        local error_msg=$(cat /tmp/chown_error)
        log_message "ERROR: Failed to set ownership on $LOGINDEFS - Error: $error_msg"
        rm -f /tmp/chown_error
        return 1
    fi

    # Verify configuration
    local verified=true
    local settings_to_check=(
        "LOG_OK_LOGINS yes"
        "UMASK 077"
        "PASS_MIN_DAYS 1"
        "PASS_MAX_DAYS 60"
        "DEFAULT_HOME no"
        "ENCRYPT_METHOD SHA512"
        "USERGROUPS_ENAB no"
        "SHA_CRYPT_MIN_ROUNDS 10000"
        "SHA_CRYPT_MAX_ROUNDS 65536"
    )
    for opt in "${settings_to_check[@]}"; do
        if ! grep -q "^$opt" "$LOGINDEFS" 2>/dev/null; then
            log_message "WARNING: $opt not set in $LOGINDEFS as expected"
            verified=false
        fi
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified all login.defs settings applied"
    fi
    rm -f /tmp/sed_error /tmp/chmod_error /tmp/chown_error /tmp/cp_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_logindefs
