# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# COMMONPASSWD='/etc/pam.d/common-password'
# COMMONAUTH='/etc/pam.d/common-auth'
# COMMONACCOUNT='/etc/pam.d/common-account'
# PAMLOGIN='/etc/pam.d/login'
# FAILLOCKCONF='/etc/security/faillock.conf'

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_password {
    echo "[$SCRIPT_COUNT] Hardening password policies in $COMMONPASSWD, $COMMONAUTH, $COMMONACCOUNT, and $PAMLOGIN"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure required packages are installed (libpam-modules, libpam-pwquality, cracklib-runtime)
    local required_pkgs=("libpam-modules" "libpam-pwquality" "cracklib-runtime")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg not found, required for password hardening"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done
    rm -f /tmp/apt_install_error

    # Backup PAM and related config files
    local config_files=("$COMMONPASSWD" "$COMMONAUTH" "$COMMONACCOUNT" "$PAMLOGIN" "$FAILLOCKCONF")
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    for file in "${config_files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Ensure files are writable
    for file in "$COMMONPASSWD" "$COMMONAUTH" "$COMMONACCOUNT" "$PAMLOGIN"; do
        if [[ ! -f "$file" ]]; then
            log_message "ERROR: $file not found, cannot configure PAM"
            return 1
        fi
        if [[ ! -w "$file" ]]; then
            log_message "ERROR: $file is not writable"
            return 1
        fi
    done

    # Add pam_pwhistory to common-password (CIS 5.3.2)
    if ! grep -q "pam_pwhistory.so" "$COMMONPASSWD"; then
        if sed -i '/the "Primary" block/apassword\trequired\t\t\tpam_pwhistory.so\tremember=5' "$COMMONPASSWD" 2>/tmp/sed_error; then
            log_message "INFO: Added pam_pwhistory.so with remember=5 to $COMMONPASSWD"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to add pam_pwhistory.so to $COMMONPASSWD - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    else
        log_message "INFO: pam_pwhistory.so already present in $COMMONPASSWD"
    fi

    # Configure pwquality.conf
    local pwquality_conf="/etc/security/pwquality.conf"
    if [[ -f "./config/pwquality.conf" ]]; then
        if cp "./config/pwquality.conf" "$pwquality_conf" 2>/tmp/cp_error; then
            log_message "INFO: Copied ./config/pwquality.conf to $pwquality_conf"
            if chmod 0644 "$pwquality_conf" 2>/tmp/chmod_error; then
                log_message "INFO: Set permissions to 0644 on $pwquality_conf"
            else
                local error_msg=$(cat /tmp/chmod_error)
                log_message "ERROR: Failed to set permissions on $pwquality_conf - Error: $error_msg"
                rm -f /tmp/chmod_error
                return 1
            fi
            if chown root:root "$pwquality_conf" 2>/tmp/chown_error; then
                log_message "INFO: Set ownership to root:root on $pwquality_conf"
            else
                local error_msg=$(cat /tmp/chown_error)
                log_message "ERROR: Failed to set ownership on $pwquality_conf - Error: $error_msg"
                rm -f /tmp/chown_error
                return 1
            fi
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to copy pwquality.conf - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "ERROR: ./config/pwquality.conf not found, cannot configure password quality"
        return 1
    fi

    # Update SHA512 rounds in common-password (NIST IA-5)
    if grep -q "use_authtok try_first_pass sha512" "$COMMONPASSWD"; then
        if sed -i 's|try_first_pass sha512.*|try_first_pass sha512 rounds=65536|' "$COMMONPASSWD" 2>/tmp/sed_error; then
            log_message "INFO: Updated SHA512 rounds to 65536 in $COMMONPASSWD"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to update SHA512 rounds in $COMMONPASSWD - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    fi

    # Remove nullok/nullok_secure from common-auth (CIS 5.3.1)
    if sed -i -E 's/(nullok|nullok_secure)//g' "$COMMONAUTH" 2>/tmp/sed_error; then
        log_message "INFO: Removed nullok and nullok_secure from $COMMONAUTH"
    else
        local error_msg=$(cat /tmp/sed_error)
        log_message "ERROR: Failed to remove nullok from $COMMONAUTH - Error: $error_msg"
        rm -f /tmp/sed_error
        return 1
    fi

    # Add pwquality retry to common-password (CIS 5.3.2)
    if ! grep -q "retry=" "$COMMONPASSWD"; then
        if echo "password requisite pam_pwquality.so retry=3" >> "$COMMONPASSWD" 2>/tmp/echo_error; then
            log_message "INFO: Added pam_pwquality.so with retry=3 to $COMMONPASSWD"
        else
            local error_msg=$(cat /tmp/echo_error)
            log_message "ERROR: Failed to add pam_pwquality.so retry to $COMMONPASSWD - Error: $error_msg"
            rm -f /tmp/echo_error
            return 1
        fi
    else
        log_message "INFO: retry option already present in $COMMONPASSWD"
    fi

    # Configure account lockout
    if [[ -f "$FAILLOCKCONF" ]]; then
        # Configure faillock if not present (CIS 5.3.3)
        if ! grep -q "faillock" "$COMMONAUTH"; then
            local faillock_settings=(
                "s|^# audit$|audit|"
                "s|^# local_users_only$|local_users_only|"
                "s|^# deny.*|deny = 5|"
                "s|^# fail_interval.*|fail_interval = 900|"
            )
            for setting in "${faillock_settings[@]}"; do
                if sed -i "$setting" "$FAILLOCKCONF" 2>/tmp/sed_error; then
                    log_message "INFO: Applied $setting to $FAILLOCKCONF"
                else
                    local error_msg=$(cat /tmp/sed_error)
                    log_message "ERROR: Failed to apply $setting to $FAILLOCKCONF - Error: $error_msg"
                    rm -f /tmp/sed_error
                    return 1
                fi
            done
            if sed -i '/pam_tally.*/d' "$COMMONACCOUNT" 2>/tmp/sed_error && \
               sed -i 's|auth.*pam_unix.so|auth required pam_faillock.so preauth\nauth [success=1 default=ignore] pam_unix.so\nauth [default=die] pam_faillock.so authfail\nauth sufficient pam_faillock.so authsucc\n|' "$COMMONAUTH" 2>/tmp/sed_error; then
                log_message "INFO: Configured pam_faillock in $COMMONAUTH and cleaned $COMMONACCOUNT"
            else
                local error_msg=$(cat /tmp/sed_error)
                log_message "ERROR: Failed to configure pam_faillock in $COMMONAUTH - Error: $error_msg"
                rm -f /tmp/sed_error
                return 1
            fi
        fi
        if ! grep -q "faillock" "$COMMONACCOUNT"; then
            if echo "account required pam_faillock.so" >> "$COMMONACCOUNT" 2>/tmp/echo_error; then
                log_message "INFO: Added pam_faillock.so to $COMMONACCOUNT"
            else
                local error_msg=$(cat /tmp/echo_error)
                log_message "ERROR: Failed to add pam_faillock.so to $COMMONACCOUNT - Error: $error_msg"
                rm -f /tmp/echo_error
                return 1
            fi
        fi
    else
        # Configure pam_tally2 as fallback (older systems)
        if ! grep -q "tally2" "$COMMONAUTH"; then
            if sed -i '/^$/a auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900' "$COMMONAUTH" 2>/tmp/sed_error && \
               sed -i '/pam_tally/d' "$COMMONACCOUNT" 2>/tmp/sed_error; then
                log_message "INFO: Configured pam_tally2 in $COMMONAUTH and cleaned $COMMONACCOUNT"
            else
                local error_msg=$(cat /tmp/sed_error)
                log_message "ERROR: Failed to configure pam_tally2 in $COMMONAUTH - Error: $error_msg"
                rm -f /tmp/sed_error
                return 1
            fi
        fi
        if ! grep -q "tally2" "$COMMONACCOUNT"; then
            if sed -i '/^$/a account required pam_tally2.so' "$COMMONACCOUNT" 2>/tmp/sed_error; then
                log_message "INFO: Added pam_tally2.so to $COMMONACCOUNT"
            else
                local error_msg=$(cat /tmp/sed_error)
                log_message "ERROR: Failed to add pam_tally2.so to $COMMONACCOUNT - Error: $error_msg"
                rm -f /tmp/sed_error
                return 1
            fi
        fi
    fi

    # Configure login PAM (CIS 5.3.1)
    if sed -i 's|^[#]*pam_lastlog.so.*|pam_lastlog.so showfailed|' "$PAMLOGIN" 2>/tmp/sed_error; then
        log_message "INFO: Configured pam_lastlog.so to showfailed in $PAMLOGIN"
    else
        local error_msg=$(cat /tmp/sed_error)
        log_message "ERROR: Failed to configure pam_lastlog.so in $PAMLOGIN - Error: $error_msg"
        rm -f /tmp/sed_error
        return 1
    fi
    if sed -i 's|^[#]*delay=.*|delay=4000000|' "$PAMLOGIN" 2>/tmp/sed_error; then
        log_message "INFO: Set login delay to 4000000 microseconds (4 seconds) in $PAMLOGIN"
    else
        local error_msg=$(cat /tmp/sed_error)
        log_message "ERROR: Failed to set login delay in $PAMLOGIN - Error: $error_msg"
        rm -f /tmp/sed_error
        return 1
    fi

    # Update cracklib dictionary
    local dict_dir="/usr/share/dict"
    if [[ -f "./misc/passwords.list" ]]; then
        if cp "./misc/passwords.list" "$dict_dir/passwords" 2>/tmp/cp_error; then
            log_message "INFO: Copied passwords.list to $dict_dir/passwords"
            if grep -v '^$' "$dict_dir/passwords" | strings > "$dict_dir/passwords_text" 2>/tmp/strings_error; then
                log_message "INFO: Processed passwords.list into $dict_dir/passwords_text"
                if update-cracklib 2>/tmp/cracklib_error; then
                    log_message "INFO: Updated cracklib dictionary with new passwords"
                else
                    local error_msg=$(cat /tmp/cracklib_error)
                    log_message "ERROR: Failed to update cracklib dictionary - Error: $error_msg"
                    rm -f /tmp/cracklib_error
                    return 1
                fi
            else
                local error_msg=$(cat /tmp/strings_error)
                log_message "ERROR: Failed to process passwords.list - Error: $error_msg"
                rm -f /tmp/strings_error
                return 1
            fi
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to copy passwords.list - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "ERROR: ./misc/passwords.list not found, cannot update cracklib dictionary"
        return 1
    fi
    rm -f /tmp/sed_error /tmp/echo_error /tmp/cp_error /tmp/strings_error /tmp/cracklib_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_password
