# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LXC='0'
# SECUREBOOT_DB='/usr/share/secureboot/db'
# POSTFIX_CONF='/etc/postfix/main.cf'
# LSB_RELEASE='/usr/bin/lsb_release'
# PSADCONF='/etc/psad/psad.conf'
# PSADDL='/etc/psad/auto_dl'
# ADMINEMAIL='root@localhost'
# SERVERIP='127.0.0.1'  # Assuming a default; should be set externally if different

# New variable to add to global variables file:
# PSAD_SERVICE='psad.service'  # Defines the psad service name for consistency and verification

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_psad {
    echo "[$SCRIPT_COUNT] Configuring and enabling psad for port scan detection"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure psad is installed
    if ! dpkg -l | grep -q "^ii.*psad"; then
        log_message "WARNING: psad package is not installed"
        log_message "INFO: Attempting to install psad"
        if $APT install -y psad 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed psad"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install psad - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: psad package is already installed"
    fi

    # Check if PSADCONF exists
    if [[ ! -f "$PSADCONF" ]]; then
        log_message "ERROR: $PSADCONF does not exist, cannot configure psad"
        echo "$PSADCONF does not exist."
        local dpkg_error=$(cat /tmp/dpkg_error 2>/dev/null)
        [[ -n "$dpkg_error" ]] && log_message "WARNING: dpkg check failed - Error: $dpkg_error"
        rm -f /tmp/dpkg_error
        return 1
    fi
    rm -f /tmp/dpkg_error

    # Backup psad configuration files
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    for file in "$PSADCONF" "$PSADDL"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Ensure files are writable
    for file in "$PSADCONF" "$PSADDL"; do
        if [[ ! -w "$file" ]]; then
            log_message "ERROR: $file is not writable"
            return 1
        fi
    done

    # Add IP exclusions to PSADDL (CIS 4.3.1)
    local exclusions=(
        "127.0.0.1    0;"
        "$SERVERIP    0;"
    )
    for excl in "${exclusions[@]}"; do
        if ! grep -qF "$excl" "$PSADDL" 2>/dev/null; then
            if echo "$excl" >> "$PSADDL" 2>/tmp/echo_error; then
                log_message "INFO: Added exclusion '$excl' to $PSADDL"
            else
                local error_msg=$(cat /tmp/echo_error)
                log_message "ERROR: Failed to add exclusion '$excl' to $PSADDL - Error: $error_msg"
                rm -f /tmp/echo_error
                return 1
            fi
        else
            log_message "INFO: Exclusion '$excl' already present in $PSADDL"
        fi
    done

    # Configure PSADCONF settings (CIS 4.3.1, NIST SI-4)
    local psad_settings=(
        "s|^[#]*EMAIL_ADDRESSES.*|EMAIL_ADDRESSES             $ADMINEMAIL;|"  # Use ADMINEMAIL
        "s|^[#]*HOSTNAME.*|HOSTNAME                    $(hostname --fqdn);|"  # Set hostname
        "s|^[#]*ENABLE_AUTO_IDS.*|ENABLE_AUTO_IDS               Y;|"          # Enable auto IDS
        "s|^[#]*DANGER_LEVEL2.*|DANGER_LEVEL2               15;|"            # Keep danger levels
        "s|^[#]*DANGER_LEVEL3.*|DANGER_LEVEL3               150;|"
        "s|^[#]*DANGER_LEVEL4.*|DANGER_LEVEL4               1500;|"
        "s|^[#]*DANGER_LEVEL5.*|DANGER_LEVEL5               10000;|"
        "s|^[#]*EMAIL_ALERT_DANGER_LEVEL.*|EMAIL_ALERT_DANGER_LEVEL    5;|"   # Alert at level 5
        "s|^[#]*EMAIL_LIMIT.*|EMAIL_LIMIT                 5;|"               # Limit emails
        "s|^[#]*EMAIL_LIMIT_STATUS_MSG.*|EMAIL_LIMIT_STATUS_MSG       Y;|"    # CHANGED: Added to fix signature update failure
        "s|^[#]*EXPECT_TCP_OPTIONS.*|EXPECT_TCP_OPTIONS             Y;|"     # Enable TCP options
        "s|^[#]*ENABLE_MAC_ADDR_REPORTING.*|ENABLE_MAC_ADDR_REPORTING   Y;|"  # Enable MAC reporting
        "s|^[#]*AUTO_IDS_DANGER_LEVEL.*|AUTO_IDS_DANGER_LEVEL       1;|"     # Auto IDS at level 1
        "s|^[#]*ENABLE_AUTO_IDS_EMAILS.*|ENABLE_AUTO_IDS_EMAILS      Y;|"    # Enable IDS emails
        "s|^[#]*IGNORE_PORTS.*|IGNORE_PORTS             NONE;|"             # No ignored ports
        "s|^[#]*IPT_SYSLOG_FILE.*|IPT_SYSLOG_FILE             /var/log/syslog;|"  # Use syslog
        "s|^[#]*SIG_UPDATE_URL.*|SIG_UPDATE_URL              https://www.cipherdyne.org/psad/signatures;|"  # HTTPS URL
    )
    for setting in "${psad_settings[@]}"; do
        if sed -i "$setting" "$PSADCONF" 2>/tmp/sed_error; then
            log_message "INFO: Applied $setting to $PSADCONF"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to apply $setting to $PSADCONF - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    done

    # Update psad signatures
    if psad --sig-update 2>/tmp/psad_sig_error; then
        log_message "INFO: Successfully updated psad signatures"
    else
        local error_msg=$(cat /tmp/psad_sig_error)
        log_message "ERROR: Failed to update psad signatures - Error: $error_msg"
        rm -f /tmp/psad_sig_error
        return 1
    fi

    # Initialize psad
    if psad -H 2>/tmp/psad_h_error; then
        log_message "INFO: Successfully initialized psad with -H"
    else
        local error_msg=$(cat /tmp/psad_h_error)
        log_message "ERROR: Failed to initialize psad - Error: $error_msg"
        rm -f /tmp/psad_h_error
        return 1
    fi

    # Analyze firewall rules
    if psad --fw-analyze 2>/tmp/psad_fw_error; then
        log_message "INFO: Successfully analyzed firewall rules with psad"
    else
        local error_msg=$(cat /tmp/psad_fw_error)
        log_message "ERROR: Failed to analyze firewall rules with psad - Error: $error_msg"
        rm -f /tmp/psad_fw_error
        return 1
    fi

    # Verify psad configuration
    local verified=true
    local settings_to_check=(
        "EMAIL_ADDRESSES             $ADMINEMAIL"
        "ENABLE_AUTO_IDS               Y"
        "EMAIL_ALERT_DANGER_LEVEL    5"
        "IPT_SYSLOG_FILE             /var/log/syslog"
    )
    for setting in "${settings_to_check[@]}"; do
        if ! grep -q "^$setting" "$PSADCONF" 2>/dev/null; then
            log_message "WARNING: Setting '$setting' not found in $PSADCONF as expected"
            verified=false
        fi
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified key psad configuration settings"
    fi

    # Show status if verbose
    if [[ "$VERBOSE" == "Y" ]]; then
        systemctl status psad.service --no-pager
        psad -S
        echo
    fi
    rm -f /tmp/echo_error /tmp/sed_error /tmp/psad_sig_error /tmp/psad_h_error /tmp/psad_fw_error /tmp/cp_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_psad
