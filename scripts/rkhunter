# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LXC='0'
# SECUREBOOT_DB='/usr/share/secureboot/db'
# POSTFIX_CONF='/etc/postfix/main.cf'
# LSB_RELEASE='/usr/bin/lsb_release'
# PSAD_SERVICE='psad.service'
# REBOOT_REQUIRED='/var/run/reboot-required'
# NSSWITCH_CONF='/etc/nsswitch.conf'
# HOSTS_EQUIV='/etc/hosts.equiv'
# RKHUNTERCONF='/etc/default/rkhunter'

# No new variables needed for this script; existing ones suffice

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_rkhunter {
    echo "[$SCRIPT_COUNT] Configuring and enabling rkhunter for rootkit detection"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure rkhunter is installed
    if ! dpkg -l | grep -q "^ii.*rkhunter" 2>/tmp/dpkg_error; then
        log_message "WARNING: rkhunter package not installed"
        log_message "INFO: Attempting to install rkhunter"
        if $APT install -y rkhunter 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed rkhunter"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install rkhunter - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: rkhunter package is already installed"
    fi

    # Backup rkhunter configuration file
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    if [[ -f "$RKHUNTERCONF" ]]; then
        if cp "$RKHUNTERCONF" "$BACKUP_DIR/rkhunter.$TIMESTAMP" 2>/tmp/cp_error; then
            log_message "INFO: Backed up $RKHUNTERCONF to $BACKUP_DIR/rkhunter.$TIMESTAMP"
        else
            local error_msg=$(cat /tmp/cp_error)
            log_message "ERROR: Failed to backup $RKHUNTERCONF - Error: $error_msg"
            rm -f /tmp/cp_error
            return 1
        fi
    else
        log_message "ERROR: $RKHUNTERCONF not found, cannot configure rkhunter"
        local dpkg_error=$(cat /tmp/dpkg_error 2>/dev/null)
        [[ -n "$dpkg_error" ]] && log_message "WARNING: dpkg check failed - Error: $dpkg_error"
        rm -f /tmp/dpkg_error
        return 1
    fi
    rm -f /tmp/dpkg_error

    # Ensure file is writable
    if [[ ! -w "$RKHUNTERCONF" ]]; then
        log_message "ERROR: $RKHUNTERCONF is not writable"
        return 1
    fi

    # Configure rkhunter settings (CIS 5.2.2)
    local rkhunter_settings=(
        "s|^[#]*CRON_DAILY_RUN=.*|CRON_DAILY_RUN=\"yes\"|"  # Enable daily cron runs
        "s|^[#]*APT_AUTOGEN=.*|APT_AUTOGEN=\"yes\"|"       # Enable APT auto updates
    )
    for setting in "${rkhunter_settings[@]}"; do
        if sed -i "$setting" "$RKHUNTERCONF" 2>/tmp/sed_error; then
            log_message "INFO: Applied $setting to $RKHUNTERCONF"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to apply $setting to $RKHUNTERCONF - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    done

    # Update rkhunter property database (NIST SI-2)
    if rkhunter --propupd 2>/tmp/rkhunter_error; then
        log_message "INFO: Successfully updated rkhunter property database with --propupd"
    else
        local error_msg=$(cat /tmp/rkhunter_error)
        log_message "ERROR: Failed to update rkhunter property database - Error: $error_msg"
        rm -f /tmp/rkhunter_error
        return 1
    fi

    # Verify configuration
    local verified=true
    local settings_to_check=(
        "CRON_DAILY_RUN=\"yes\""
        "APT_AUTOGEN=\"yes\""
    )
    for setting in "${settings_to_check[@]}"; do
        if ! grep -q "^$setting" "$RKHUNTERCONF" 2>/dev/null; then
            log_message "WARNING: Setting '$setting' not found in $RKHUNTERCONF as expected"
            verified=false
        fi
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified all rkhunter configuration settings applied"
    fi
    rm -f /tmp/sed_error /tmp/rkhunter_error /tmp/cp_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_rkhunter
