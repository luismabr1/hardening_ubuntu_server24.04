# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LXC='0'
# SECUREBOOT_DB='/usr/share/secureboot/db'
# POSTFIX_CONF='/etc/postfix/main.cf'
# LSB_RELEASE='/usr/bin/lsb_release'
# PSAD_SERVICE='psad.service'
# REBOOT_REQUIRED='/var/run/reboot-required'
# NSSWITCH_CONF='/etc/nsswitch.conf'
# HOSTS_EQUIV='/etc/hosts.equiv'
# SECURITYACCESS='/etc/security/access.conf'

# New variable to add to global variables file:
# SECURETTY='/etc/securetty'  # Path to securetty file, added for restricting root login terminals
# DEBUG_SHELL_SERVICE='debug-shell.service'  # Defines debug-shell service name for consistency

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_rootaccess {
    echo "[$SCRIPT_COUNT] Restricting root access"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure required packages are installed (coreutils for sed, systemd for systemctl)
    local required_pkgs=("coreutils" "systemd")
    for pkg in "${required_pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii.*$pkg"; then
            log_message "WARNING: Package $pkg not found, required for root access configuration"
            log_message "INFO: Attempting to install $pkg"
            if $APT install -y "$pkg" 2>/tmp/apt_install_error; then
                log_message "INFO: Successfully installed $pkg"
            else
                local error_msg=$(cat /tmp/apt_install_error)
                log_message "ERROR: Failed to install $pkg - Error: $error_msg"
                rm -f /tmp/apt_install_error
                return 1
            fi
        else
            log_message "INFO: Package $pkg is already installed"
        fi
    done

    # Backup configuration files
    local securetty="/etc/securetty"  # Using SECURETTY if defined in global vars
    local files=("$SECURITYACCESS" "$securetty")
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        fi
    done

    # Ensure files are writable
    for file in "${files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_message "WARNING: $file not found, creating it"
            touch "$file" || {
                log_message "ERROR: Failed to create $file"
                return 1
            }
        fi
        if [[ ! -w "$file" ]]; then
            log_message "ERROR: $file is not writable"
            return 1
        fi
    done

    # Restrict root access in SECURITYACCESS (CIS 5.4.3)
    if ! grep -E '^+\s*:\s*root\s*:\s*127.0.0.1$|^:root:127.0.0.1' "$SECURITYACCESS" >/dev/null 2>&1; then
        if sed -i 's|^[#]*.*root.*:.*127.0.0.1$|+:root:127.0.0.1|' "$SECURITYACCESS" 2>/tmp/sed_error; then
            log_message "INFO: Updated $SECURITYACCESS to restrict root access to 127.0.0.1"
        else
            local error_msg=$(cat /tmp/sed_error)
            log_message "ERROR: Failed to update $SECURITYACCESS - Error: $error_msg"
            rm -f /tmp/sed_error
            return 1
        fi
    else
        log_message "INFO: Root access already restricted to 127.0.0.1 in $SECURITYACCESS"
    fi

    # Restrict root login terminals in securetty
    if echo "console" > "$securetty" 2>/tmp/echo_error; then
        log_message "INFO: Set $securetty to allow root login only from console"
        if chmod 0600 "$securetty" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0600 on $securetty"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $securetty - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$securetty" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $securetty"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $securetty - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    else
        local error_msg=$(cat /tmp/echo_error)
        log_message "ERROR: Failed to update $securetty - Error: $error_msg"
        rm -f /tmp/echo_error
        return 1
    fi

    # Mask debug-shell service (NIST AC-3)
    echo "[$SCRIPT_COUNT] Masking debug-shell service"
    if systemctl mask debug-shell.service 2>/tmp/mask_error; then
        log_message "INFO: Successfully masked debug-shell.service"
    else
        local error_msg=$(cat /tmp/mask_error)
        log_message "ERROR: Failed to mask debug-shell.service - Error: $error_msg"
        rm -f /tmp/mask_error
        return 1
    fi
    if systemctl stop debug-shell.service 2>/tmp/stop_error; then
        log_message "INFO: Successfully stopped debug-shell.service"
    else
        local error_msg=$(cat /tmp/stop_error)
        log_message "WARNING: Failed to stop debug-shell.service - Error: $error_msg"  # Non-critical if already stopped
    fi
    if systemctl daemon-reload 2>/tmp/daemon_error; then
        log_message "INFO: Successfully reloaded systemd daemon"
    else
        local error_msg=$(cat /tmp/daemon_error)
        log_message "ERROR: Failed to reload systemd daemon - Error: $error_msg"
        rm -f /tmp/daemon_error
        return 1
    fi

    # Verify configuration
    if grep -E '^+\s*:\s*root\s*:\s*127.0.0.1$|^:root:127.0.0.1' "$SECURITYACCESS" >/dev/null 2>&1; then
        log_message "INFO: Verified root access restricted to 127.0.0.1 in $SECURITYACCESS"
    else
        log_message "WARNING: Root access not restricted to 127.0.0.1 in $SECURITYACCESS"
    fi
    if [[ "$(cat "$securetty" 2>/dev/null)" == "console" ]]; then
        log_message "INFO: Verified $securetty restricts root login to console"
    else
        log_message "WARNING: $securetty does not restrict root login to console"
    fi
    if systemctl is-enabled debug-shell.service 2>/dev/null | grep -q "masked"; then
        log_message "INFO: Verified debug-shell.service is masked"
    else
        log_message "WARNING: debug-shell.service is not masked"
    fi

    # Show status if verbose
    if [[ "$VERBOSE" == "Y" ]]; then
        systemctl status debug-shell.service --no-pager
        echo
    fi
    rm -f /tmp/sed_error /tmp/echo_error /tmp/mask_error /tmp/stop_error /tmp/daemon_error /tmp/chmod_error /tmp/chown_error /tmp/cp_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_rootaccess
