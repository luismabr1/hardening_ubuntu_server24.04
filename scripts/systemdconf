# Assuming part of a larger script with these variables:
# LOG_FILE="/var/log/user_hardening.log"
# BACKUP_DIR="/root/backups"
# TIMESTAMP=$(date +%Y%m%d_%H%M%S)
# VERBOSE='N'
# SCRIPT_COUNT=0
# APT='apt-get'
# LXC='0'
# SECUREBOOT_DB='/usr/share/secureboot/db'
# POSTFIX_CONF='/etc/postfix/main.cf'
# LSB_RELEASE='/usr/bin/lsb_release'
# PSAD_SERVICE='psad.service'
# REBOOT_REQUIRED='/var/run/reboot-required'
# NSSWITCH_CONF='/etc/nsswitch.conf'
# HOSTS_EQUIV='/etc/hosts.equiv'
# SECURETTY='/etc/securetty'
# DEBUG_SHELL_SERVICE='debug-shell.service'
# SSH_MODULI='/etc/ssh/moduli'
# SSH_SERVICE='ssh.service'
# SUDOERS_DIR='/etc/sudoers.d'
# PAM_SU='/etc/pam.d/su'
# SUDO_LOG='/var/log/sudo.log'
# SUID_LIST='./misc/suid.list'
# SHELLS_FILE='/etc/shells'
# SYSCTL_SERVICE='systemd-sysctl.service'
# ARPBIN='/usr/sbin/arp'
# SYSTEMCONF='/etc/systemd/system.conf'
# USERCONF='/etc/systemd/user.conf'

# No new variables needed for this script; existing ones suffice

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

function f_systemdconf {
    echo "[$SCRIPT_COUNT] Configuring $SYSTEMCONF and $USERCONF for systemd security"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" >&2
        log_message "ERROR: Function must be run as root"
        return 1
    fi

    # Ensure systemd is installed
    if ! dpkg -l | grep -q "^ii.*systemd"; then
        log_message "WARNING: systemd package not found, required for systemd configuration"
        log_message "INFO: Attempting to install systemd"
        if $APT install -y systemd 2>/tmp/apt_install_error; then
            log_message "INFO: Successfully installed systemd"
        else
            local error_msg=$(cat /tmp/apt_install_error)
            log_message "ERROR: Failed to install systemd - Error: $error_msg"
            rm -f /tmp/apt_install_error
            return 1
        fi
    else
        log_message "INFO: systemd package is already installed"
    fi

    # Backup systemd configuration files
    local files=("$SYSTEMCONF" "$USERCONF")
    mkdir -p "$BACKUP_DIR" || {
        log_message "ERROR: Failed to create backup directory $BACKUP_DIR"
        return 1
    }
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            if cp "$file" "$BACKUP_DIR/$(basename "$file").$TIMESTAMP" 2>/tmp/cp_error; then
                log_message "INFO: Backed up $file to $BACKUP_DIR/$(basename "$file").$TIMESTAMP"
            else
                local error_msg=$(cat /tmp/cp_error)
                log_message "ERROR: Failed to backup $file - Error: $error_msg"
                rm -f /tmp/cp_error
                return 1
            fi
        else
            log_message "WARNING: $file not found, creating it"
            touch "$file" || {
                log_message "ERROR: Failed to create $file"
                return 1
            }
        fi
        if [[ ! -w "$file" ]]; then
            log_message "ERROR: $file is not writable"
            return 1
        fi
    done

    # Configure SYSTEMCONF and USERCONF (CIS 1.5.1)
    local system_settings=(
        "s|^[#]*DumpCore=.*|DumpCore=no|"                # Disable core dumps
        "s|^[#]*CrashShell=.*|CrashShell=no|"            # Disable crash shell
        "s|^[#]*DefaultLimitCORE=.*|DefaultLimitCORE=0|" # Limit core size to 0
        "s|^[#]*DefaultLimitNOFILE=.*|DefaultLimitNOFILE=1024|"  # Limit open files
        "s|^[#]*DefaultLimitNPROC=.*|DefaultLimitNPROC=1024|"    # Limit processes
    )
    for file in "$SYSTEMCONF" "$USERCONF"; do
        for setting in "${system_settings[@]}"; do
            if sed -i "$setting" "$file" 2>/tmp/sed_error; then
                log_message "INFO: Applied $setting to $file"
            else
                local error_msg=$(cat /tmp/sed_error)
                log_message "ERROR: Failed to apply $setting to $file - Error: $error_msg"
                rm -f /tmp/sed_error
                return 1
            fi
        done
        # Set permissions
        if chmod 0644 "$file" 2>/tmp/chmod_error; then
            log_message "INFO: Set permissions to 0644 on $file"
        else
            local error_msg=$(cat /tmp/chmod_error)
            log_message "ERROR: Failed to set permissions on $file - Error: $error_msg"
            rm -f /tmp/chmod_error
            return 1
        fi
        if chown root:root "$file" 2>/tmp/chown_error; then
            log_message "INFO: Set ownership to root:root on $file"
        else
            local error_msg=$(cat /tmp/chown_error)
            log_message "ERROR: Failed to set ownership on $file - Error: $error_msg"
            rm -f /tmp/chown_error
            return 1
        fi
    done

    # Reload systemd daemon
    if systemctl daemon-reload 2>/tmp/daemon_error; then
        log_message "INFO: Successfully reloaded systemd daemon"
    else
        local error_msg=$(cat /tmp/daemon_error)
        log_message "ERROR: Failed to reload systemd daemon - Error: $error_msg"
        rm -f /tmp/daemon_error
        return 1
    fi

    # Verify configuration
    local verified=true
    local settings_to_check=(
        "DumpCore=no"
        "CrashShell=no"
        "DefaultLimitCORE=0"
        "DefaultLimitNOFILE=1024"
        "DefaultLimitNPROC=1024"
    )
    for file in "$SYSTEMCONF" "$USERCONF"; do
        for setting in "${settings_to_check[@]}"; do
            if ! grep -q "^$setting" "$file" 2>/dev/null; then
                log_message "WARNING: Setting '$setting' not found in $file as expected"
                verified=false
            fi
        done
    done
    if [[ "$verified" == "true" ]]; then
        log_message "INFO: Verified all systemd configuration settings in $SYSTEMCONF and $USERCONF"
    fi
    rm -f /tmp/sed_error /tmp/chmod_error /tmp/chown_error /tmp/cp_error /tmp/daemon_error /tmp/apt_install_error

    ((SCRIPT_COUNT++))
}

# Example usage (assuming part of larger script)
# f_systemdconf

